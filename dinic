const int MAXN = 10e3 + 228;
struct edge
{
	int a, b, cap;
};
vector<edge> e;
vector<int> g[MAXN];
int d[MAXN];
void addedge(int a, int b, int cap)
{
	g[a].pbc(e.size());
	e.pbc({ a,b,cap });
	g[b].pbc(e.size());
	e.pbc({ b,a,0 });
}
int s, t;
bool bfs()
{
	fill(d, d + MAXN, inf);
	d[s] = 0;
	queue<int> q;
	q.push(s);
	while (q.size())
	{
		int v = q.front();
		q.pop();
		for (int i : g[v])
		{
			if (e[i].cap > 0)
			{
				int b = e[i].b;
				if (d[b] > d[v] + 1)
				{
					d[b] = d[v] + 1;
					q.push(b);
				}
			}
		}
	}
	return d[t] != inf;
}
int ptr[MAXN];
int dfs(int v, int flow)
{
	if (v == t) return flow;
	if (!flow) return 0;
	int sum = 0;
	for (; ptr[v] < g[v].size(); ++ptr[v])
	{
		int b = e[g[v][ptr[v]]].b;
		int cap = e[g[v][ptr[v]]].cap;
		if (cap <= 0)continue;
		if (d[b] != d[v] + 1) continue;
		int x = dfs(b, min(flow, cap));
		int id = g[v][ptr[v]];
		e[id].cap -= x;
		e[id ^ 1].cap += x;
		flow -= x;
		sum += x;
	}
	return sum;
}
int dinic()
{
	int ans = 0;
	while (1)
	{
		if (!bfs()) break;
		
		fill(ptr, ptr + MAXN, 0);
		int x = dfs(s, 1e9);
		if (!x)break;
		ans += x;
	}
	return ans;
}
